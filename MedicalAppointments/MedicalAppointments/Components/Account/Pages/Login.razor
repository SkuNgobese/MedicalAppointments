@page "/Account/Login"
@inject AuthService AuthService
@inject NavigationManager NavigationManager

@using System.ComponentModel.DataAnnotations
@using MedicalAppointments.Services
@using MedicalAppointments.Shared.DTOs.Auth

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>

<div class="row">
    <div class="col-lg-6">
        <section>
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" placeholder="Email" />
                    <label for="Input.Email">Email</label>
                    <ValidationMessage For="@(() => Input.Email)" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" placeholder="Password" />
                    <label for="Input.Password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                    <label class="form-check-label">Remember me</label>
                </div>

                <button type="submit" class="btn btn-primary w-100">Log in</button>

                @if (!string.IsNullOrWhiteSpace(Message))
                {
                    <p class="text-danger mt-2">@Message</p>
                }

                <div class="mt-3">
                    <a href="/Account/Register">Register as a new user</a><br />
                    <a href="/Account/ForgotPassword">Forgot your password?</a>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private LoginDto Input { get; set; } = new();
    private string? Message;

    private async Task LoginUser()
    {
        if (await AuthService.LoginAsync(Input))
            NavigationManager.NavigateTo("/");
        else
            Message = Message ?? "Invalid login.";
    }
}