@page "/Login"
@using Blazored.LocalStorage
@using Blazored.SessionStorage
@using MedicalAppointments.Interfaces
@using MedicalAppointments.Providers
@using MedicalAppointments.Shared.DTOs.Auth
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorage
@inject ISessionStorageService _sessionStorage

<div class="card">
    <div class="card-body">
        <section>
            <StatusMessage Message="@Error" />
            <h5 class="card-title">Please enter your details</h5>
            <EditForm Model="@loginModel" method="post" OnValidSubmit="HandleLogin" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="form-floating mb-3">
                    <InputText @bind-Value="loginModel.Email" id="loginModel.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="Input.Email" class="form-label">Email</label>
                    <ValidationMessage For="() => loginModel.Email" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="loginModel.Password" id="loginModel.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="loginModel.Password" class="form-label">Password</label>
                    <ValidationMessage For="() => loginModel.Password" class="text-danger" />
                </div>

                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="loginModel.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>

                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>

                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string Error = "";
    private string? tokenToSave;
    private bool rememberMe;
    private bool shouldPersistToken;

    [SupplyParameterFromForm]
    private LoginDto loginModel { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private async Task HandleLogin()
    {
        var result = await AuthService.LoginAsync(loginModel);

        if (!string.IsNullOrWhiteSpace(result?.Token))
        {
            tokenToSave = result.Token;
            rememberMe = loginModel.RememberMe;
            shouldPersistToken = true;
        }

        if (result!.Successful)
            NavigationManager.NavigateTo("/");
        else
            Error = result.Error;
    }

    protected new async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldPersistToken && !string.IsNullOrWhiteSpace(tokenToSave))
        {
            if (rememberMe)
                await _localStorage.SetItemAsync("authToken", tokenToSave);
            else
                await _sessionStorage.SetItemAsync("authToken", tokenToSave);

            shouldPersistToken = false;
        }
    }
}